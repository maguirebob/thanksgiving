<div class="container mt-4">
  <div class="row">
    <div class="col-12">
      <h1 class="mb-4">Admin Dashboard</h1>
      
      <!-- Statistics Cards -->
      <div class="row mb-4">
        <div class="col-md-4">
          <div class="card text-center">
            <div class="card-body">
              <h5 class="card-title">Total Users</h5>
              <h2 class="text-primary"><%= stats.totalUsers %></h2>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card text-center">
            <div class="card-body">
              <h5 class="card-title">Total Events</h5>
              <h2 class="text-success"><%= stats.totalEvents %></h2>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card text-center">
            <div class="card-body">
              <h5 class="card-title">Total Photos</h5>
              <h2 class="text-info"><%= stats.totalPhotos %></h2>
            </div>
          </div>
        </div>
      </div>

      <!-- Recent Events -->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Recent Events</h5>
          <div>
            <button type="button" class="btn btn-info me-2" id="viewVolumeBtn">
              <i class="fas fa-hdd me-1"></i>View Volume
            </button>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addMenuModal">
              <i class="fas fa-plus me-1"></i>Add Menu
            </button>
          </div>
        </div>
        <div class="card-body">
          <% if (recentEvents && recentEvents.length > 0) { %>
            <div class="table-responsive">
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Event Name</th>
                    <th>Date</th>
                    <th>Location</th>
                    <th>Photos</th>
                    <th>Created</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% recentEvents.forEach(event => { %>
                    <tr>
                      <td>
                        <a href="/menu/<%= event.id %>" class="text-decoration-none">
                          <%= event.event_name %>
                        </a>
                      </td>
                      <td><%= new Date(event.event_date).toLocaleDateString() %></td>
                      <td>Family Home</td>
                      <td>
                        <span class="badge bg-secondary"><%= event.photoCount %></span>
                      </td>
                      <td><%= new Date(event.created_at).toLocaleDateString() %></td>
                      <td>
                        <div class="btn-group btn-group-sm">
                          <button class="btn btn-outline-primary" onclick="editEvent(<%= event.id %>)" title="Edit Event">
                            <i class="fas fa-edit"></i>
                          </button>
                          <button class="btn btn-outline-danger" onclick="deleteEvent(<%= event.id %>)" title="Delete Event">
                            <i class="fas fa-trash"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% } else { %>
            <p class="text-muted">No events found.</p>
          <% } %>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="row mt-4">
        <div class="col-12">
          <div class="card">
            <div class="card-header">
              <h5 class="mb-0">Quick Actions</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-3 mb-2">
                  <a href="/admin/users" class="btn btn-primary w-100">
                    <i class="fas fa-users me-2"></i>
                    Manage Users
                  </a>
                </div>
                <div class="col-md-3 mb-2">
                  <a href="/" class="btn btn-success w-100">
                    <i class="fas fa-home me-2"></i>
                    View Site
                  </a>
                </div>
                <div class="col-md-3 mb-2">
                  <a href="/api/v1/events" class="btn btn-info w-100">
                    <i class="fas fa-code me-2"></i>
                    API Endpoints
                  </a>
                </div>
                <div class="col-md-3 mb-2">
                  <a href="/auth/logout" class="btn btn-warning w-100">
                    <i class="fas fa-sign-out-alt me-2"></i>
                    Logout
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Edit Event Modal -->
<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editEventModalLabel">Edit Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editEventForm">
          <input type="hidden" id="editEventId" name="id">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editEventName" class="form-label">Event Name</label>
              <input type="text" class="form-control" id="editEventName" name="event_name" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editEventType" class="form-label">Event Type</label>
              <input type="text" class="form-control" id="editEventType" name="event_type" required>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6 mb-3">
              <label for="editEventLocation" class="form-label">Location</label>
              <input type="text" class="form-control" id="editEventLocation" name="event_location" required>
            </div>
            <div class="col-md-6 mb-3">
              <label for="editEventDate" class="form-label">Date</label>
              <input type="date" class="form-control" id="editEventDate" name="event_date" required>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="editMenuTitle" class="form-label">Menu Title</label>
            <input type="text" class="form-control" id="editMenuTitle" name="menu_title" required>
          </div>
          
          <div class="mb-3">
            <label for="editMenuImageUrl" class="form-label">Menu Image URL</label>
            <input type="text" class="form-control" id="editMenuImageUrl" name="menu_image_url" required>
          </div>
          
          <div class="mb-3">
            <label for="editDescription" class="form-label">Description</label>
            <textarea class="form-control" id="editDescription" name="description" rows="4" required></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" onclick="saveEvent()">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Event Modal -->
<div class="modal fade" id="deleteEventModal" tabindex="-1" aria-labelledby="deleteEventModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteEventModalLabel">Delete Event</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this event? This action cannot be undone and will permanently remove this event from the database.</p>
        <div class="alert alert-warning">
          <i class="fas fa-exclamation-triangle me-2"></i>
          <strong>Warning:</strong> This will also delete all associated photos and comments.
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" onclick="confirmDeleteEvent()">Delete Event</button>
      </div>
    </div>
  </div>
</div>

<script>
let currentEventId = null;

// Edit event function
async function editEvent(eventId) {
  try {
    // Fetch event data
    const response = await fetch(`/api/v1/events/${eventId}`);
    const result = await response.json();
    
    if (result.success) {
      const event = result.event;
      
      // Populate form
      document.getElementById('editEventId').value = event.id;
      document.getElementById('editEventName').value = event.event_name;
      document.getElementById('editEventType').value = event.event_type || 'Thanksgiving';
      document.getElementById('editEventLocation').value = event.event_location || '';
      document.getElementById('editEventDate').value = new Date(event.event_date).toISOString().split('T')[0];
      document.getElementById('editMenuTitle').value = event.event_name;
      document.getElementById('editMenuImageUrl').value = event.menu_image_url || '';
      document.getElementById('editDescription').value = event.description || '';
      
      // Show modal
      const modal = new bootstrap.Modal(document.getElementById('editEventModal'));
      modal.show();
    } else {
      alert('Error loading event: ' + result.message);
    }
  } catch (error) {
    console.error('Error loading event:', error);
    alert('Error loading event. Please try again.');
  }
}

// Save event function
async function saveEvent() {
  try {
    const formData = new FormData(document.getElementById('editEventForm'));
    const updateData = {};
    
    // Convert FormData to object
    for (let [key, value] of formData.entries()) {
      updateData[key] = value;
    }
    
    const eventId = updateData.id;
    delete updateData.id; // Remove id from update data
    
    const response = await fetch(`/api/v1/events/${eventId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updateData)
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('editEventModal'));
      modal.hide();
      
      // Show success message
      showMessage('Event updated successfully!', 'success');
      
      // Reload page after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } else {
      alert('Error updating event: ' + result.message);
    }
  } catch (error) {
    console.error('Error updating event:', error);
    alert('Error updating event. Please try again.');
  }
}

// Delete event function
function deleteEvent(eventId) {
  currentEventId = eventId;
  const modal = new bootstrap.Modal(document.getElementById('deleteEventModal'));
  modal.show();
}

// Confirm delete event function
async function confirmDeleteEvent() {
  if (!currentEventId) return;
  
  try {
    const response = await fetch(`/api/v1/events/${currentEventId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Close modal
      const modal = bootstrap.Modal.getInstance(document.getElementById('deleteEventModal'));
      modal.hide();
      
      // Show success message
      showMessage('Event deleted successfully!', 'success');
      
      // Reload page after a short delay
      setTimeout(() => {
        window.location.reload();
      }, 1500);
    } else {
      alert('Error deleting event: ' + result.message);
    }
  } catch (error) {
    console.error('Error deleting event:', error);
    alert('Error deleting event. Please try again.');
  }
}

// Show message function
function showMessage(message, type) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
  messageDiv.style.position = 'fixed';
  messageDiv.style.top = '20px';
  messageDiv.style.right = '20px';
  messageDiv.style.zIndex = '10000';
  messageDiv.style.minWidth = '300px';
  messageDiv.innerHTML = `
    ${message}
    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
  `;
  
  document.body.appendChild(messageDiv);
  
  // Auto-remove after 5 seconds
  setTimeout(() => {
    if (messageDiv.parentNode) {
      messageDiv.parentNode.removeChild(messageDiv);
    }
  }, 5000);
}

// Add Menu Modal functionality
document.addEventListener('DOMContentLoaded', function() {
  const addMenuForm = document.getElementById('addMenuForm');
  const menuImageInput = document.getElementById('menu_image');
  const imagePreview = document.getElementById('imagePreview');
  const previewImageElement = document.getElementById('previewImage');
  const submitBtn = document.getElementById('submitBtn');

  // Image preview functionality
  menuImageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      // Validate file type
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
      if (!allowedTypes.includes(file.type)) {
        showMessage('Please select a JPEG or PNG image file.', 'error');
        e.target.value = '';
        return;
      }

      // Validate file size (5MB)
      if (file.size > 5 * 1024 * 1024) {
        showMessage('File size must be less than 5MB.', 'error');
        e.target.value = '';
        return;
      }

      // Show preview
      const reader = new FileReader();
      reader.onload = function(e) {
        previewImageElement.src = e.target.result;
        imagePreview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    } else {
      imagePreview.style.display = 'none';
    }
  });

  // Form submission
  addMenuForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Disable submit button to prevent double submission
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Creating...';

    try {
      const formData = new FormData(addMenuForm);
      
      const response = await fetch('/api/v1/events', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();

      if (data.success) {
        showMessage('Menu created successfully!', 'success');
        
        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('addMenuModal'));
        modal.hide();
        
        // Reset form
        addMenuForm.reset();
        imagePreview.style.display = 'none';
        
        // Reload page to show new menu
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } else {
        showMessage(data.message || 'Failed to create menu', 'error');
      }

    } catch (error) {
      console.error('Error creating menu:', error);
      showMessage('Network error occurred. Please try again.', 'error');
    } finally {
      // Re-enable submit button
      submitBtn.disabled = false;
      submitBtn.innerHTML = '<i class="fas fa-save me-1"></i>Create Menu';
    }
  });

  // Reset form when modal is closed
  document.getElementById('addMenuModal').addEventListener('hidden.bs.modal', function() {
    addMenuForm.reset();
    imagePreview.style.display = 'none';
  });

  // Volume Contents functionality
  document.getElementById('viewVolumeBtn').addEventListener('click', function() {
          const modal = new bootstrap.Modal(document.getElementById('volumeContentsModal'));
          modal.show();
          
          // Set up event listeners for buttons inside the modal after it's shown
          setTimeout(() => {
            const refreshBtn = document.getElementById('refreshVolumeBtn');
            const syncBtn = document.getElementById('syncLocalImagesBtn');
            
            console.log('Setting up volume modal buttons:', { refreshBtn: !!refreshBtn, syncBtn: !!syncBtn });
            
            if (refreshBtn && !refreshBtn.hasAttribute('data-listener-added')) {
              refreshBtn.addEventListener('click', function() {
                console.log('Refresh button clicked');
                loadVolumeContents();
              });
              refreshBtn.setAttribute('data-listener-added', 'true');
              console.log('Refresh button event listener added');
            } else if (!refreshBtn) {
              console.warn('refreshVolumeBtn element not found');
            }
            
            if (syncBtn && !syncBtn.hasAttribute('data-listener-added')) {
              // Add visual debugging - change button color to confirm it's the right button
              syncBtn.style.border = '3px solid red';
              syncBtn.style.backgroundColor = '#ffcccc';
              
              syncBtn.addEventListener('click', function(e) {
                console.log('Sync button clicked', e);
                console.log('About to call syncLocalImages()');
                try {
                  syncLocalImages();
                } catch (error) {
                  console.error('Error calling syncLocalImages:', error);
                }
              });
              syncBtn.setAttribute('data-listener-added', 'true');
              console.log('Sync button event listener added');
              console.log('Sync button element:', syncBtn);
              console.log('Sync button disabled:', syncBtn.disabled);
              console.log('Sync button visible:', syncBtn.offsetWidth > 0 && syncBtn.offsetHeight > 0);
            } else if (!syncBtn) {
              console.warn('syncLocalImagesBtn element not found');
            } else {
              console.log('Sync button already has listener or not found');
            }
          }, 100);
          
          // Add a test button to manually trigger sync
          setTimeout(() => {
            const testBtn = document.createElement('button');
            testBtn.textContent = 'TEST SYNC';
            testBtn.style.position = 'fixed';
            testBtn.style.top = '10px';
            testBtn.style.right = '10px';
            testBtn.style.zIndex = '9999';
            testBtn.style.backgroundColor = 'red';
            testBtn.style.color = 'white';
            testBtn.style.padding = '10px';
            testBtn.addEventListener('click', function() {
              console.log('TEST SYNC button clicked');
              syncLocalImages();
            });
            document.body.appendChild(testBtn);
            console.log('Test sync button added');
          }, 200);
          
          loadVolumeContents();
        });
        
        async function loadVolumeContents() {
          const volumeContents = document.getElementById('volumeContents');
          const refreshBtn = document.getElementById('refreshVolumeBtn');
          
          // Show loading state
          volumeContents.innerHTML = `
            <div class="text-center">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
              </div>
              <p class="mt-2">Loading volume contents...</p>
            </div>
          `;
          
          // Disable refresh button
          refreshBtn.disabled = true;
          
          try {
            const response = await fetch('/admin/volume-contents', {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json'
              }
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Update volume information
              document.getElementById('volumeEnvironment').textContent = data.environment || 'Unknown';
              document.getElementById('volumeMountPath').textContent = data.mountPath || 'Unknown';
              document.getElementById('volumeName').textContent = data.volumeName || 'Unknown';
              document.getElementById('volumeLastUpdated').textContent = new Date().toLocaleString();
              
              // Update statistics
              document.getElementById('volumeFileCount').textContent = data.stats.totalFiles || 0;
              document.getElementById('volumeTotalSize').textContent = data.stats.totalSize || '0 B';
              document.getElementById('volumeImageCount').textContent = data.stats.imageFiles || 0;
              document.getElementById('volumeOtherCount').textContent = data.stats.otherFiles || 0;
              document.getElementById('volumeLinkedCount').textContent = data.stats.linkedFiles || 0;
              document.getElementById('volumeOrphanedCount').textContent = data.stats.orphanedFiles || 0;
              
              // Display file contents
              if (data.files && data.files.length > 0) {
                let filesHtml = '<div class="table-responsive"><table class="table table-striped table-hover">';
                filesHtml += '<thead><tr><th>Filename</th><th>Size</th><th>Type</th><th>Status</th><th>Modified</th><th>Actions</th></tr></thead><tbody>';
                
                data.files.forEach(file => {
                  const isImage = file.type === 'image';
                  const iconClass = isImage ? 'fas fa-image text-primary' : 'fas fa-file text-secondary';
                  const sizeFormatted = formatFileSize(file.size);
                  const modifiedFormatted = new Date(file.modified).toLocaleString();
                  const statusBadge = file.isLinked 
                    ? '<span class="badge bg-success">Linked</span>' 
                    : '<span class="badge bg-danger">Orphaned</span>';
                  
                  filesHtml += `
                    <tr>
                      <td><i class="${iconClass} me-2"></i>${file.name}</td>
                      <td>${sizeFormatted}</td>
                      <td><span class="badge ${isImage ? 'bg-primary' : 'bg-secondary'}">${file.type}</span></td>
                      <td>${statusBadge}</td>
                      <td>${modifiedFormatted}</td>
                      <td>
                        ${isImage ? `<button class="btn btn-sm btn-outline-primary" onclick="previewImage('${file.name}')">
                          <i class="fas fa-eye me-1"></i>Preview
                        </button>` : ''}
                      </td>
                    </tr>
                  `;
                });
                
                filesHtml += '</tbody></table></div>';
                volumeContents.innerHTML = filesHtml;
              } else {
                volumeContents.innerHTML = `
                  <div class="alert alert-info text-center">
                    <i class="fas fa-info-circle me-2"></i>
                    No files found in the volume.
                  </div>
                `;
              }
              
            } else {
              volumeContents.innerHTML = `
                <div class="alert alert-danger text-center">
                  <i class="fas fa-exclamation-triangle me-2"></i>
                  Error loading volume contents: ${data.message || 'Unknown error'}
                </div>
              `;
            }
            
          } catch (error) {
            console.error('Error loading volume contents:', error);
            volumeContents.innerHTML = `
              <div class="alert alert-danger text-center">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Network error occurred while loading volume contents.
              </div>
            `;
          } finally {
            // Re-enable refresh button
            refreshBtn.disabled = false;
          }
        }
        
        function formatFileSize(bytes) {
          if (bytes === 0) return '0 B';
          const k = 1024;
          const sizes = ['B', 'KB', 'MB', 'GB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function previewImage(filename) {
          console.log('previewImage called with filename:', filename);
          
          const imageUrl = `/images/${filename}`;
          console.log('Image URL:', imageUrl);
          
          // Test if image loads before showing modal
          const testImg = new Image();
          testImg.onload = function() {
            console.log('Image loaded successfully, showing modal');
            showImageModal(imageUrl, filename);
          };
          testImg.onerror = function() {
            console.error('Image failed to load:', imageUrl);
            showMessage(`❌ Failed to load image: ${filename}`, 'error');
            // Fallback to new tab
            window.open(imageUrl, '_blank');
          };
          testImg.src = imageUrl;
        }
        
        function showImageModal(imageUrl, filename) {
          const previewModal = `
            <div class="modal fade" id="imagePreviewModal" tabindex="-1">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Image Preview: ${filename}</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                  </div>
                  <div class="modal-body text-center">
                    <img src="${imageUrl}" class="img-fluid" alt="${filename}" style="max-height: 70vh;">
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <a href="${imageUrl}" target="_blank" class="btn btn-primary">
                      <i class="fas fa-external-link-alt me-1"></i>Open in New Tab
                    </a>
                  </div>
                </div>
              </div>
            </div>
          `;
          
          // Remove existing preview modal if any
          const existingModal = document.getElementById('imagePreviewModal');
          if (existingModal) {
            existingModal.remove();
          }
          
          // Add new preview modal
          document.body.insertAdjacentHTML('beforeend', previewModal);
          
          // Show the modal
          const modal = new bootstrap.Modal(document.getElementById('imagePreviewModal'));
          modal.show();
          
          // Clean up when modal is hidden
          document.getElementById('imagePreviewModal').addEventListener('hidden.bs.modal', function() {
            this.remove();
          });
        }
        
        async function syncLocalImages() {
          console.log('syncLocalImages function called');
          const syncBtn = document.getElementById('syncLocalImagesBtn');
          const fileInput = document.getElementById('menuImagesUpload');
          
          console.log('Elements found:', { syncBtn: !!syncBtn, fileInput: !!fileInput });
          
          if (!syncBtn) {
            console.error('syncLocalImagesBtn element not found');
            showMessage('❌ Sync button not found. Please refresh the page.', 'error');
            return;
          }
          
          if (!fileInput) {
            console.error('menuImagesUpload element not found');
            showMessage('❌ File input not found. Please refresh the page.', 'error');
            return;
          }
          
          console.log('File input files:', fileInput.files);
          console.log('Number of files:', fileInput.files ? fileInput.files.length : 'no files object');
          
          const originalText = syncBtn.innerHTML;
          
          // Check if files are selected
          if (!fileInput.files || fileInput.files.length === 0) {
            showMessage('❌ Please select menu images to upload', 'error');
            return;
          }
          
          // Disable button and show loading
          syncBtn.disabled = true;
          syncBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Syncing...';
          
          try {
            const formData = new FormData();
            
            // Add all selected files
            for (let i = 0; i < fileInput.files.length; i++) {
              formData.append('menu_images', fileInput.files[i]);
            }
            
            const response = await fetch('/admin/sync-local-images', {
              method: 'POST',
              body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
              showMessage(`✅ ${data.message}`, 'success');
              console.log('Sync results:', data.results);
              
              // Clear file input
              fileInput.value = '';
              
              // Refresh volume contents to show new files
              setTimeout(() => {
                loadVolumeContents();
              }, 1000);
            } else {
              showMessage(`❌ ${data.message}`, 'error');
            }
            
          } catch (error) {
            console.error('Error syncing local images:', error);
            showMessage('❌ Network error occurred during sync. Please try again.', 'error');
          } finally {
            // Re-enable button
            syncBtn.disabled = false;
            syncBtn.innerHTML = originalText;
          }
        }
}); // End of DOMContentLoaded
        </script>

<!-- Add Menu Modal -->
<div class="modal fade" id="addMenuModal" tabindex="-1" aria-labelledby="addMenuModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addMenuModalLabel">
          <i class="fas fa-plus me-2"></i>Add New Menu
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="addMenuForm" enctype="multipart/form-data">
        <div class="modal-body">
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="event_name" class="form-label">Event Name <span class="text-danger">*</span></label>
                <input type="text" class="form-control" id="event_name" name="event_name" required 
                       placeholder="e.g., Thanksgiving 2025" maxlength="100">
                <div class="form-text">Enter a descriptive name for the Thanksgiving event</div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="event_date" class="form-label">Event Date <span class="text-danger">*</span></label>
                <input type="date" class="form-control" id="event_date" name="event_date" required>
                <div class="form-text">Select the date of the Thanksgiving event</div>
              </div>
            </div>
          </div>
          
          <div class="row">
            <div class="col-md-6">
              <div class="mb-3">
                <label for="event_location" class="form-label">Location</label>
                <input type="text" class="form-control" id="event_location" name="event_location" 
                       placeholder="e.g., Family Home" maxlength="200">
                <div class="form-text">Optional location where the event took place</div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label for="menu_image" class="form-label">Menu Image <span class="text-danger">*</span></label>
                <input type="file" class="form-control" id="menu_image" name="menu_image" 
                       accept="image/jpeg,image/jpg,image/png" required>
                <div class="form-text">Upload a JPEG or PNG image (max 5MB)</div>
              </div>
            </div>
          </div>
          
          <div class="mb-3">
            <label for="event_description" class="form-label">Description</label>
            <textarea class="form-control" id="event_description" name="event_description" 
                      rows="3" placeholder="Optional description of the event..." maxlength="1000"></textarea>
            <div class="form-text">Optional description or notes about the event</div>
          </div>
          
          <!-- Preview Section -->
          <div class="mb-3" id="imagePreview" style="display: none;">
            <label class="form-label">Image Preview</label>
            <div class="text-center">
              <img id="previewImage" src="" alt="Preview" class="img-thumbnail" style="max-width: 300px; max-height: 200px;">
            </div>
          </div>
        </div>
        
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times me-1"></i>Cancel
          </button>
          <button type="submit" class="btn btn-primary" id="submitBtn">
            <i class="fas fa-save me-1"></i>Create Menu
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Volume Contents Modal -->
<div class="modal fade" id="volumeContentsModal" tabindex="-1" aria-labelledby="volumeContentsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="volumeContentsModalLabel">
          <i class="fas fa-hdd me-2"></i>Railway Volume Contents
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-md-6">
            <h6><i class="fas fa-folder me-1"></i>Volume Information</h6>
            <div class="card">
              <div class="card-body">
                <p><strong>Environment:</strong> <span id="volumeEnvironment">Loading...</span></p>
                <p><strong>Mount Path:</strong> <span id="volumeMountPath">Loading...</span></p>
                <p><strong>Volume Name:</strong> <span id="volumeName">Loading...</span></p>
                <p><strong>Last Updated:</strong> <span id="volumeLastUpdated">Loading...</span></p>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <h6><i class="fas fa-chart-bar me-1"></i>Statistics</h6>
            <div class="card">
              <div class="card-body">
                <p><strong>Total Files:</strong> <span id="volumeFileCount">Loading...</span></p>
                <p><strong>Total Size:</strong> <span id="volumeTotalSize">Loading...</span></p>
                <p><strong>Image Files:</strong> <span id="volumeImageCount">Loading...</span></p>
                <p><strong>Other Files:</strong> <span id="volumeOtherCount">Loading...</span></p>
                <p><strong>Linked Files:</strong> <span id="volumeLinkedCount" class="text-success">Loading...</span></p>
                <p><strong>Orphaned Files:</strong> <span id="volumeOrphanedCount" class="text-danger">Loading...</span></p>
              </div>
            </div>
          </div>
        </div>
        
        <hr>
        
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h6><i class="fas fa-list me-1"></i>File Contents</h6>
          <button type="button" class="btn btn-sm btn-outline-primary" id="refreshVolumeBtn">
            <i class="fas fa-sync-alt me-1"></i>Refresh
          </button>
        </div>
        
        <!-- File Upload Section -->
        <div class="mb-3">
          <label for="menuImagesUpload" class="form-label">
            <i class="fas fa-upload me-1"></i>Upload Menu Images
          </label>
          <input type="file" class="form-control" id="menuImagesUpload" name="menu_images" 
                 accept="image/jpeg,image/jpg,image/png" multiple>
          <div class="form-text">Select multiple menu images (1994_Menu.png, 1997_Menu.jpeg, etc.)</div>
          <button type="button" class="btn btn-sm btn-success mt-2" id="syncLocalImagesBtn">
            <i class="fas fa-sync me-1"></i>Sync Uploaded Images
          </button>
        </div>
        
        <div id="volumeContents">
          <div class="text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading volume contents...</p>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="downloadVolumeLogBtn">
          <i class="fas fa-download me-1"></i>Download Log
        </button>
      </div>
    </div>
  </div>
</div>
