 <!-- Back Navigation -->
<div class="mb-4">
    <a href="/" class="btn-view-details" style="background-color: var(--secondary-gray);">
        <i class="fas fa-arrow-left me-2"></i>
        Back to All Menus
    </a>
</div>

<!-- Enhanced Menu Detail Layout -->
<div class="enhanced-detail-container">
    <!-- Hero Section -->
    <div class="hero-section mb-5">
<div class="row">
        <!-- Menu Image -->
            <div class="col-lg-6">
                <div class="menu-image-container" style="height: 400px; border-radius: 12px; background-color: #f8f9fa; border: 1px solid #e5e5e5; display: flex; align-items: center; justify-content: center; padding: 2rem; position: relative; overflow: hidden; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
                    <img src="<%= event.menu_image_url %>" 
                         alt="<%= event.event_name %>" 
                     id="menuImage"
                         style="max-width: 100%; max-height: 100%; object-fit: contain; object-position: center; border-radius: 8px; cursor: zoom-in; transition: transform 0.3s ease;"
                     onerror="this.src='/images/placeholder-menu.jpg'"
                     onclick="toggleZoom()">
                
                <!-- Zoom overlay -->
                <div id="zoomOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.9); z-index: 9999; display: none; align-items: center; justify-content: center; cursor: zoom-out;" onclick="toggleZoom()">
                        <img src="<%= event.menu_image_url %>" 
                             alt="<%= event.event_name %>" 
                         style="max-width: 90%; max-height: 90%; object-fit: contain; border-radius: 8px;"
                         onerror="this.src='/images/placeholder-menu.jpg'">
                    </div>
                </div>
            </div>
            
            <!-- Event Details & Quick Stats -->
            <div class="col-lg-6">
                <div class="event-details-card" style="background: white; border-radius: 12px; padding: 2rem; box-shadow: 0 4px 20px rgba(0,0,0,0.1); height: 100%; display: flex; flex-direction: column; justify-content: space-between;">
                    <!-- Event Info -->
                    <div>
                        <div class="menu-date" style="color: #6c757d; font-size: 1rem; margin-bottom: 0.5rem;">
                            <%= new Date(event.event_date).toLocaleDateString('en-US', { 
                                weekday: 'long', 
                                year: 'numeric', 
                                month: 'long', 
                                day: 'numeric' 
                            }) %>
                        </div>
                        <h1 class="menu-title" style="font-size: 2.5rem; margin-bottom: 1rem; color: #2c3e50;"><%= event.event_name %></h1>
                        <div class="menu-location" style="font-size: 1.2rem; margin-bottom: 1.5rem; color: #495057;">
                            <i class="fas fa-map-marker-alt me-2"></i><%= event.event_location || 'Family Home' %>
                        </div>
                        <div class="event-description" style="color: #6c757d; line-height: 1.6;">
                            <%= event.description || 'A wonderful Thanksgiving celebration with family and friends.' %>
                        </div>
                    </div>
                    

                </div>
            </div>
            </div>
        </div>

    <!-- Quick Stats Section -->
    <div class="quick-stats-section mb-4">
        <div class="row g-3">
            <div class="col-md-3 col-sm-6">
                <div class="stats-card">
                    <div class="stats-icon">
                        <i class="fas fa-images"></i>
                    </div>
                    <div class="stats-content">
                        <div class="stats-number" id="photoCount">0</div>
                        <div class="stats-label">Photos</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stats-card">
                    <div class="stats-icon">
                        <i class="fas fa-book-open"></i>
                    </div>
                    <div class="stats-content">
                        <div class="stats-number" id="recipeCount">0</div>
                        <div class="stats-label">Recipes</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stats-card">
                    <div class="stats-icon">
                        <i class="fas fa-blog"></i>
                    </div>
                    <div class="stats-content">
                        <div class="stats-number" id="blogCount">0</div>
                        <div class="stats-label">Blog Posts</div>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stats-card">
                    <div class="stats-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="stats-content">
                        <div class="stats-number" id="commentCount">0</div>
                        <div class="stats-label">Comments</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabbed Navigation -->
    <div class="tabbed-navigation">
        <!-- Tab Navigation -->
        <ul class="nav nav-tabs custom-tabs mb-4" id="contentTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="photos-tab" data-bs-toggle="tab" data-bs-target="#photos" type="button" role="tab" aria-controls="photos" aria-selected="true">
                    <i class="fas fa-images me-2"></i>Photos
                    <span class="badge bg-primary ms-2" id="photosBadge">0</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="recipes-tab" data-bs-toggle="tab" data-bs-target="#recipes" type="button" role="tab" aria-controls="recipes" aria-selected="false">
                    <i class="fas fa-book-open me-2"></i>Recipes
                    <span class="badge bg-success ms-2" id="recipesBadge">0</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="blog-tab" data-bs-toggle="tab" data-bs-target="#blog" type="button" role="tab" aria-controls="blog" aria-selected="false">
                    <i class="fas fa-blog me-2"></i>Blog
                    <span class="badge bg-info ms-2" id="blogBadge">0</span>
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="comments-tab" data-bs-toggle="tab" data-bs-target="#comments" type="button" role="tab" aria-controls="comments" aria-selected="false">
                    <i class="fas fa-comments me-2"></i>Comments
                    <span class="badge bg-warning ms-2" id="commentsBadge">0</span>
                </button>
            </li>
        </ul>

        <!-- Tab Content -->
        <div class="tab-content" id="contentTabsContent">
            <!-- Photos Tab -->
            <div class="tab-pane fade show active" id="photos" role="tabpanel" aria-labelledby="photos-tab">
            <!-- Photo Upload Section -->
            <div class="photo-upload-section mb-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="mb-0">
                        <i class="fas fa-images me-2"></i>Photos
                    </h3>
                    <div class="upload-controls">
                        <button class="btn btn-primary me-2" onclick="openPhotoUpload()">
                            <i class="fas fa-upload me-2"></i>Upload Photo
                    </button>
                        <button class="btn btn-success" onclick="openCameraCapture()">
                            <i class="fas fa-camera me-2"></i>Take Photo
                    </button>
                </div>
            </div>
            
                <!-- Photo Grid -->
                <div id="photosGrid" class="row">
                    <!-- Photos will be dynamically loaded here -->
                        </div>
                
                <!-- No Photos Message -->
                <div id="noPhotosMessage" class="text-center text-muted py-5" style="display: none;">
                    <i class="fas fa-images fa-3x mb-3" style="color: #dee2e6;"></i>
                    <h4>No photos yet</h4>
                    <p>Upload some memories from this Thanksgiving!</p>
                    <button class="btn btn-primary" onclick="openPhotoUpload()">
                        <i class="fas fa-upload me-2"></i>Upload First Photo
                    </button>
                </div>
                        </div>
                    </div>
            </div>

            <!-- Recipes Tab -->
            <div class="tab-pane fade" id="recipes" role="tabpanel" aria-labelledby="recipes-tab">
                <div class="recipes-section">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3 class="mb-0">
                            <i class="fas fa-book-open me-2"></i>Recipes
                        </h3>
                        <button class="btn btn-success" onclick="addRecipe()">
                            <i class="fas fa-plus me-2"></i>Add Recipe
                        </button>
                    </div>
                    
                    <div id="recipesList" class="row">
                        <!-- Recipes will be dynamically loaded here -->
                    </div>
                    
                    <!-- No Recipes Message -->
                    <div id="noRecipesMessage" class="text-center text-muted py-5">
                        <i class="fas fa-book-open fa-3x mb-3" style="color: #dee2e6;"></i>
                        <h4>No recipes yet</h4>
                        <p>Share your favorite Thanksgiving recipes!</p>
                        <button class="btn btn-success" onclick="addRecipe()">
                            <i class="fas fa-plus me-2"></i>Add First Recipe
                        </button>
                    </div>
                </div>
            </div>

            <!-- Blog Tab -->
            <div class="tab-pane fade" id="blog" role="tabpanel" aria-labelledby="blog-tab">
                <div class="blog-section">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3 class="mb-0">
                            <i class="fas fa-blog me-2"></i>Blog Posts
                        </h3>
                        <button class="btn btn-info" onclick="addBlogPost()">
                            <i class="fas fa-plus me-2"></i>New Post
                        </button>
                    </div>
                    
                    <div id="blogPostsList" class="row">
                        <!-- Blog posts will be dynamically loaded here -->
                    </div>
                    
                    <!-- No Blog Posts Message -->
                    <div id="noBlogPostsMessage" class="text-center text-muted py-5">
                        <i class="fas fa-blog fa-3x mb-3" style="color: #dee2e6;"></i>
                        <h4>No blog posts yet</h4>
                        <p>Share stories and memories from this Thanksgiving!</p>
                        <button class="btn btn-info" onclick="addBlogPost()">
                            <i class="fas fa-plus me-2"></i>Write First Post
                        </button>
                    </div>
                </div>
            </div>

            <!-- Comments Tab -->
            <div class="tab-pane fade" id="comments" role="tabpanel" aria-labelledby="comments-tab">
                <div class="comments-section">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h3 class="mb-0">
                            <i class="fas fa-comments me-2"></i>Comments
                        </h3>
                        <button class="btn btn-warning" onclick="addComment()">
                            <i class="fas fa-plus me-2"></i>Add Comment
                        </button>
                    </div>
                    
                    <div id="commentsList" class="row">
                        <!-- Comments will be dynamically loaded here -->
                    </div>
                    
                    <!-- No Comments Message -->
                    <div id="noCommentsMessage" class="text-center text-muted py-5">
                        <i class="fas fa-comments fa-3x mb-3" style="color: #dee2e6;"></i>
                        <h4>No comments yet</h4>
                        <p>Share your thoughts about this Thanksgiving!</p>
                        <button class="btn btn-warning" onclick="addComment()">
                            <i class="fas fa-plus me-2"></i>Add First Comment
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>



<!-- Photo Upload Modal -->
<div id="photoUploadModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; align-items: center; justify-content: center;">
    <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 600px; width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <h3 style="color: var(--primary-black); margin-bottom: 1rem; font-family: 'Playfair Display', Georgia, serif;">
            <i class="fas fa-upload me-2"></i>
            Upload Photo
        </h3>
        
        <form id="photoUploadForm" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="photoFile" class="form-label">Select Photo</label>
                <input type="file" class="form-control" id="photoFile" accept="image/*" required>
            </div>
            
            <div class="mb-3">
                <label for="photoDescription" class="form-label">Description</label>
                <textarea class="form-control" id="photoDescription" rows="3" placeholder="Describe this photo..."></textarea>
            </div>
            
            <div class="mb-3">
                <label for="photoCaption" class="form-label">Caption</label>
                <input type="text" class="form-control" id="photoCaption" placeholder="Short caption for this photo">
            </div>
            
            <div class="d-flex gap-2 justify-content-end">
                <button type="button" class="btn-view-details" style="background-color: var(--secondary-gray);" onclick="closePhotoUpload()">
                    <i class="fas fa-times me-2"></i>
                    Cancel
                </button>
                <button type="submit" class="btn-view-details">
                    <i class="fas fa-upload me-2"></i>
                    Upload Photo
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Camera Capture Modal -->
<div id="cameraModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; align-items: center; justify-content: center;">
    <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 800px; width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <h3 style="color: var(--primary-black); margin-bottom: 1rem; font-family: 'Playfair Display', Georgia, serif;">
            <i class="fas fa-camera me-2"></i>
            Take Photo
        </h3>
        
                    <div class="mb-3">
                <video id="cameraVideo" autoplay style="width: 100%; max-height: 400px; border-radius: 8px; background: #000;"></video>
                <canvas id="cameraCanvas" style="display: none;"></canvas>
                <img id="capturedImagePreview" style="display: none; width: 100%; max-height: 400px; border-radius: 8px; object-fit: cover;" alt="Captured photo">
            </div>
        
        <div class="mb-3">
            <label for="captureDescription" class="form-label">Description</label>
            <textarea class="form-control" id="captureDescription" rows="2" placeholder="Describe this photo..."></textarea>
        </div>
        
        <div class="mb-3">
            <label for="captureCaption" class="form-label">Caption</label>
            <input type="text" class="form-control" id="captureCaption" placeholder="Short caption for this photo">
        </div>
        
        <div class="d-flex gap-2 justify-content-center">
            <button type="button" class="btn-view-details" onclick="startCamera()" id="startCameraBtn">
                <i class="fas fa-video me-2"></i>
                Start Camera
            </button>
            <button type="button" class="btn-view-details" onclick="alert('Camera capture functionality coming soon!')" id="captureBtn" style="display: none;">
                <i class="fas fa-camera me-2"></i>
                Capture
            </button>
            <button type="button" class="btn-view-details" onclick="alert('Save photo functionality coming soon!')" id="saveBtn" style="display: none;">
                <i class="fas fa-save me-2"></i>
                Save Photo
            </button>
            <button type="button" class="btn-view-details" style="background-color: var(--secondary-gray);" onclick="closeCamera()">
                <i class="fas fa-times me-2"></i>
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Navigation Footer -->
<div class="text-center mt-5">
    <a href="/" class="btn-view-details" style="padding: 1rem 2rem; font-size: 1.1rem;">
        <i class="fas fa-home me-2"></i>
        View All Menus
    </a>
</div>

<script>
// Image zoom functionality
function toggleZoom() {
    const overlay = document.getElementById('zoomOverlay');
    const body = document.body;
    
    if (overlay.style.display === 'none' || overlay.style.display === '') {
        overlay.style.display = 'flex';
        body.style.overflow = 'hidden'; // Prevent background scrolling
    } else {
        overlay.style.display = 'none';
        body.style.overflow = 'auto'; // Restore scrolling
    }
}

// Download image functionality
function downloadImage() {
    const img = document.getElementById('menuImage');
    const link = document.createElement('a');
    link.href = img.src;
    link.download = '<%= event.event_name.replace(/[^a-z0-9]/gi, "_").toLowerCase() %>_menu.jpg';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// Close zoom overlay with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const overlay = document.getElementById('zoomOverlay');
        if (overlay.style.display === 'flex') {
            toggleZoom();
        }
    }
});

// Responsive image sizing
function adjustImageSize() {
    const container = document.querySelector('.menu-image-container');
    const img = document.getElementById('menuImage');
    
    if (window.innerWidth < 768) {
        container.style.height = '400px';
        container.style.padding = '1rem';
    } else if (window.innerWidth < 1024) {
        container.style.height = '500px';
        container.style.padding = '1.5rem';
    } else {
        container.style.height = '600px';
        container.style.padding = '2rem';
    }
}

// Adjust image size on load and resize
window.addEventListener('load', adjustImageSize);
window.addEventListener('resize', adjustImageSize);







// Photo Management Functions
let currentStream = null;
let capturedImageData = null;

// Get the auth token from localStorage or cookies
function getAuthToken() {
    return localStorage.getItem('authToken') || getCookie('authToken');
}

// Helper function to get cookie value
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) return parts.pop().split(';').shift();
    return null;
}

// Initialize Photo System
let photoManager;

// Make photoManager globally accessible
window.photoManager = null;

document.addEventListener('DOMContentLoaded', function() {
    try {
        console.log('DOM loaded, initializing PhotoManager...');
        
        // Check if Bootstrap is available
        console.log('Bootstrap available:', typeof bootstrap !== 'undefined');
        if (typeof bootstrap !== 'undefined') {
            console.log('Bootstrap version:', bootstrap.Tooltip.VERSION || 'unknown');
        }
        
        // Check if required elements exist
        const photosGrid = document.getElementById('photosGrid');
        const noPhotosMessage = document.getElementById('noPhotosMessage');
        console.log('Required elements found:', {
            photosGrid: !!photosGrid,
            noPhotosMessage: !!noPhotosMessage
        });
        
        // Get auth token
        const authToken = getAuthToken();
        console.log('Auth token found:', !!authToken);
        
        // Simple photo functionality - no PhotoManager needed
        console.log('Simple photo functionality ready');
        
        // Initialize stats
        updateStats();
        
        // Initialize content sections
        initializeContentSections();
        
    } catch (error) {
        console.error('Error initializing PhotoManager:', error);
        console.error('Error stack:', error.stack);
        
        // Still initialize content sections even if PhotoManager fails
        initializeContentSections();
    }
});

// Enhanced Details Page Functions

// Initialize content sections
function initializeContentSections() {
    try {
        console.log('Initializing content sections...');
        
        // Load content for photo section
        console.log('Photo functionality ready');
        
        console.log('Content sections initialized successfully');
    } catch (error) {
        console.error('Error initializing content sections:', error);
    }
}

// Update stats counters
async function updateStats() {
    try {
        // Update photo count - simple approach
        const photoCount = 0; // Will be updated when photos are actually loaded
        const photoCountElement = document.getElementById('photoCount');
        const photosBadgeElement = document.getElementById('photosBadge');
        if (photoCountElement) photoCountElement.textContent = photoCount;
        if (photosBadgeElement) photosBadgeElement.textContent = photoCount;
        
        // Only photo functionality - other sections removed
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

// Quick action functions



// Content section handlers
document.addEventListener('DOMContentLoaded', function() {
    
    // Photo functionality event listeners are handled by PhotoManager
});

// Photo functionality only



// Photo loading is now handled by PhotoManager.loadPhotos()

// Photo display is now handled by PhotoUIController.displayPhotos()

// Photo Upload Functions
function openPhotoUpload() {
    console.log('Opening photo upload modal...');
    const modal = document.getElementById('photoUploadModal');
    if (modal) {
        modal.style.display = 'flex';
    } else {
        alert('Photo upload functionality coming soon!');
    }
}

function closePhotoUpload() {
    document.getElementById('photoUploadModal').style.display = 'none';
    document.getElementById('photoUploadForm').reset();
}

// Photo upload form submission is now handled by PhotoManager in setupPhotoEventListeners()

// Camera Functions
function openCameraCapture() {
    console.log('Opening camera capture...');
    const modal = document.getElementById('cameraModal');
    if (modal) {
        modal.style.display = 'flex';
    } else {
        alert('Camera capture functionality coming soon!');
    }
}

function closeCamera() {
    document.getElementById('cameraModal').style.display = 'none';
    stopCamera();
    document.getElementById('captureDescription').value = '';
    document.getElementById('captureCaption').value = '';
    document.getElementById('startCameraBtn').style.display = 'inline-block';
    document.getElementById('captureBtn').style.display = 'none';
    document.getElementById('saveBtn').style.display = 'none';
    
    // Reset video and preview display
    const video = document.getElementById('cameraVideo');
    const preview = document.getElementById('capturedImagePreview');
    video.style.display = 'block';
    preview.style.display = 'none';
    preview.src = '';
    
    // Clear captured data
    capturedImageData = null;
}

async function startCamera() {
    try {
        console.log('Starting camera...');
        currentStream = await navigator.mediaDevices.getUserMedia({ 
            video: { 
                width: { ideal: 1280 },
                height: { ideal: 720 }
            } 
        });
        
        console.log('Camera stream obtained:', currentStream);
        
        const video = document.getElementById('cameraVideo');
        const preview = document.getElementById('capturedImagePreview');
        
        // Ensure video is visible and preview is hidden
        video.style.display = 'block';
        preview.style.display = 'none';
        
        video.srcObject = currentStream;
        
        // Wait for video to load
        video.onloadedmetadata = function() {
            console.log('Video metadata loaded:', {
                videoWidth: video.videoWidth,
                videoHeight: video.videoHeight
            });
        };
        
        document.getElementById('startCameraBtn').style.display = 'none';
        document.getElementById('captureBtn').style.display = 'inline-block';
        
        console.log('Camera started successfully');
    } catch (error) {
        console.error('Error accessing camera:', error);
        showMessage('Error accessing camera. Please check permissions.', 'error');
    }
}

function stopCamera() {
    if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
        currentStream = null;
    }
}

function capturePhoto() {
    const video = document.getElementById('cameraVideo');
    const canvas = document.getElementById('cameraCanvas');
    const preview = document.getElementById('capturedImagePreview');
    const ctx = canvas.getContext('2d');
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    ctx.drawImage(video, 0, 0);
    
    capturedImageData = canvas.toDataURL('image/jpeg', 0.8);
    
    console.log('Photo captured:', {
        width: canvas.width,
        height: canvas.height,
        dataLength: capturedImageData.length,
        dataStart: capturedImageData.substring(0, 50) + '...'
    });
    
    // Show captured image preview and hide video
    video.style.display = 'none';
    preview.src = capturedImageData;
    preview.style.display = 'block';
    
    document.getElementById('captureBtn').style.display = 'none';
    document.getElementById('saveBtn').style.display = 'inline-block';
    
    stopCamera();
}

// Camera photo saving is now handled by PhotoManager in setupPhotoEventListeners()

// Add event listeners for photo interactions
function addPhotoEventListeners() {
    // Photo view triggers
    document.querySelectorAll('.photo-view-trigger').forEach(img => {
        img.addEventListener('click', function() {
            const fileData = this.getAttribute('data-file-data');
            const description = this.getAttribute('data-description');
            const caption = this.getAttribute('data-caption');
            viewPhoto(fileData, description, caption);
        });
    });
    
    // Photo edit triggers
    document.querySelectorAll('.photo-edit-trigger').forEach(btn => {
        btn.addEventListener('click', function() {
            const photoId = this.getAttribute('data-photo-id');
            const description = this.getAttribute('data-description');
            const caption = this.getAttribute('data-caption');
            editPhoto(photoId, description, caption);
        });
    });
    
    // Photo delete triggers
    document.querySelectorAll('.photo-delete-trigger').forEach(btn => {
        btn.addEventListener('click', function() {
            const photoId = this.getAttribute('data-photo-id');
            deletePhoto(photoId);
        });
    });
}

// Photo Management Functions
function viewPhoto(fileData, description, caption) {
    // Check if fileData is valid
    if (!fileData || fileData === '' || fileData === 'undefined') {
        showMessage('Photo data not available for viewing', 'error');
        return;
    }
    
    // Create a simple photo viewer modal
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
        background-color: rgba(0,0,0,0.9); z-index: 10001; 
        display: flex; align-items: center; justify-content: center;
        cursor: pointer;
    `;
    modal.onclick = () => document.body.removeChild(modal);
    
    modal.innerHTML = `
        <div style="max-width: 90%; max-height: 90%; text-align: center;">
            <img src="${fileData}" 
                 style="max-width: 100%; max-height: 80%; object-fit: contain; border-radius: 8px;"
                 onerror="this.src='/images/placeholder-menu.jpg'">
            <div style="color: white; margin-top: 1rem;">
                <h4>${caption || 'Untitled'}</h4>
                <p>${description || 'No description'}</p>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// Photo management functions are now handled by PhotoManager and PhotoUIController

// Close modals when clicking outside
document.addEventListener('click', function(event) {
    const photoUploadModal = document.getElementById('photoUploadModal');
    const cameraModal = document.getElementById('cameraModal');
    
    if (photoUploadModal && event.target === photoUploadModal) {
        closePhotoUpload();
    }
    if (cameraModal && event.target === cameraModal) {
        closeCamera();
    }
});

// Quick Stats Management
function updateStats() {
    try {
        // For now, we'll set placeholder values
        // In later phases, these will be populated from actual data
        const stats = {
            photos: 0,      // Will be updated when photos are loaded
            recipes: 0,     // Will be updated when recipes are implemented
            blog: 0,        // Will be updated when blog posts are implemented
            comments: 0     // Will be updated when comments are implemented
        };

        // Update the display
        Object.keys(stats).forEach(key => {
            const countElement = document.getElementById(`${key}Count`);
            if (countElement) {
                countElement.textContent = stats[key];
            }
        });

        console.log('Stats updated:', stats);
    } catch (error) {
        console.error('Error updating stats:', error);
    }
}

// Initialize stats when page loads
document.addEventListener('DOMContentLoaded', function() {
    updateStats();
});

// Import JavaScript modules
</script>

<!-- Scripts -->
<!-- Photo functionality scripts removed - using simple modal approach -->

<script>
// Simple photo form handling
function setupPhotoEventListeners() {
    // Photo upload form - simple alert for now
    const uploadForm = document.getElementById('photoUploadForm');
    if (uploadForm) {
        uploadForm.addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Photo upload functionality coming soon!');
        });
    }
}

// Tabbed Navigation Functionality
function initializeTabbedNavigation() {
    // Initialize Bootstrap tabs
    const tabTriggerList = [].slice.call(document.querySelectorAll('#contentTabs button[data-bs-toggle="tab"]'));
    tabTriggerList.forEach(function (tabTriggerEl) {
        new bootstrap.Tab(tabTriggerEl);
    });

    // Add click handlers for tab badges
    const tabButtons = document.querySelectorAll('#contentTabs .nav-link');
    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Update active tab styling
            tabButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            // Update tab content visibility
            const targetId = this.getAttribute('data-bs-target').substring(1);
            const tabPanes = document.querySelectorAll('.tab-pane');
            tabPanes.forEach(pane => {
                pane.classList.remove('show', 'active');
            });
            
            const targetPane = document.getElementById(targetId);
            if (targetPane) {
                targetPane.classList.add('show', 'active');
            }
        });
    });
}

// Tab Content Management Functions
function addRecipe() {
    alert('Recipe functionality coming soon!');
}

function addBlogPost() {
    alert('Blog post functionality coming soon!');
}

function addComment() {
    alert('Comment functionality coming soon!');
}

// Update tab badges with current counts
function updateTabBadges() {
    const photoCount = document.getElementById('photoCount')?.textContent || '0';
    const recipeCount = document.getElementById('recipeCount')?.textContent || '0';
    const blogCount = document.getElementById('blogCount')?.textContent || '0';
    const commentCount = document.getElementById('commentCount')?.textContent || '0';
    
    document.getElementById('photosBadge').textContent = photoCount;
    document.getElementById('recipesBadge').textContent = recipeCount;
    document.getElementById('blogBadge').textContent = blogCount;
    document.getElementById('commentsBadge').textContent = commentCount;
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeTabbedNavigation();
    updateTabBadges();
});
</script>