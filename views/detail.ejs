 <!-- Back Navigation -->
<div class="mb-4">
    <a href="/" class="btn-view-details" style="background-color: var(--secondary-gray);">
        <i class="fas fa-arrow-left me-2"></i>
        Back to All Menus
    </a>
</div>

<!-- Menu Detail Layout -->
<div class="row">
    <!-- Main Content -->
    <div class="col-lg-8">
        <!-- Menu Header -->
        <div class="mb-4">
            <div class="menu-date"><%= new Date(event.event_date).toLocaleDateString('en-US', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
            }) %></div>
            <h1 class="menu-title" style="font-size: 3rem; margin-bottom: 1rem;"><%= event.menu_title %></h1>
            <div class="menu-location" style="font-size: 1.1rem; margin-bottom: 2rem;"><%= event.event_location %></div>
        </div>

        <!-- Menu Image -->
        <div class="mb-5">
            <div class="menu-image-container" style="height: 600px; border-radius: 8px; background-color: #f8f9fa; border: 1px solid #e5e5e5; display: flex; align-items: center; justify-content: center; padding: 2rem; position: relative; overflow: hidden;">
                <img src="/images/<%= event.menu_image_filename %>" 
                     alt="<%= event.menu_title %>" 
                     id="menuImage"
                     style="max-width: 100%; max-height: 100%; object-fit: contain; object-position: center; border-radius: 4px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); cursor: zoom-in; transition: transform 0.3s ease;"
                     onerror="this.src='/images/placeholder-menu.jpg'"
                     onclick="toggleZoom()">
                
                <!-- Zoom overlay -->
                <div id="zoomOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.9); z-index: 9999; display: none; align-items: center; justify-content: center; cursor: zoom-out;" onclick="toggleZoom()">
                    <img src="/images/<%= event.menu_image_filename %>" 
                         alt="<%= event.menu_title %>" 
                         style="max-width: 90%; max-height: 90%; object-fit: contain; border-radius: 8px;"
                         onerror="this.src='/images/placeholder-menu.jpg'">
                </div>
            </div>
            
            <!-- Image controls -->
            <div class="text-center mt-3">
                <button class="btn-view-details" onclick="toggleZoom()" style="margin-right: 1rem;">
                    <i class="fas fa-search-plus me-2"></i>
                    Zoom Image
                </button>
                <button class="btn-view-details" onclick="downloadImage()" style="background-color: var(--secondary-gray);">
                    <i class="fas fa-download me-2"></i>
                    Download
                </button>
            </div>
        </div>

        <!-- Description -->
        <div class="mb-5">
            <h2 class="section-title" style="font-size: 2rem; border-bottom: 2px solid var(--accent-orange);">About This Menu</h2>
            <p style="font-size: 1.1rem; line-height: 1.8; color: var(--secondary-gray);"><%= event.event_description %></p>
        </div>

        <!-- Edit Menu Section -->
        <div class="mb-5">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="section-title" style="font-size: 2rem; border-bottom: 2px solid var(--accent-orange); margin-bottom: 0;">Edit Menu</h2>
                <div class="d-flex gap-2">
                    <button class="btn-view-details" onclick="toggleEditForm()" id="editToggleBtn">
                        <i class="fas fa-edit me-2"></i>
                        Edit Menu
                    </button>
                    <button class="btn-view-details" onclick="showDeleteConfirmation()" id="deleteBtn" style="background-color: #dc3545; border-color: #dc3545;">
                        <i class="fas fa-trash me-2"></i>
                        Delete Menu
                    </button>
                </div>
            </div>
            
            <div id="editForm" style="display: none;">
                <form id="menuEditForm" class="menu-edit-form">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="event_name" class="form-label">Event Name</label>
                            <input type="text" class="form-control" id="event_name" name="event_name" value="<%= event.event_name %>" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="event_type" class="form-label">Event Type</label>
                            <input type="text" class="form-control" id="event_type" name="event_type" value="<%= event.event_type %>" required>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="event_location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="event_location" name="event_location" value="<%= event.event_location %>" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="event_date" class="form-label">Date</label>
                            <input type="date" class="form-control" id="event_date" name="event_date" value="<%= new Date(event.event_date).toISOString().split('T')[0] %>" required>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="menu_title" class="form-label">Menu Title</label>
                        <input type="text" class="form-control" id="menu_title" name="menu_title" value="<%= event.menu_title %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="menu_image_filename" class="form-label">Image Filename</label>
                        <input type="text" class="form-control" id="menu_image_filename" name="menu_image_filename" value="<%= event.menu_image_filename %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="event_description" class="form-label">Description</label>
                        <textarea class="form-control" id="event_description" name="event_description" rows="4" required><%= event.event_description %></textarea>
                    </div>
                    
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn-view-details">
                            <i class="fas fa-save me-2"></i>
                            Save Changes
                        </button>
                        <button type="button" class="btn-view-details" style="background-color: var(--secondary-gray);" onclick="cancelEdit()">
                            <i class="fas fa-times me-2"></i>
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
        <div class="sticky-top" style="top: 100px;">
            <!-- Menu Info Card -->
            <div class="menu-card" style="margin-bottom: 2rem;">
                <div class="menu-content">
                    <h3 style="font-family: 'Playfair Display', Georgia, serif; font-size: 1.5rem; margin-bottom: 1.5rem; color: var(--primary-black);">Menu Details</h3>
                    
                    <div style="margin-bottom: 1.5rem;">
                        <div style="color: var(--secondary-gray); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 0.5rem;">Event Type</div>
                        <div style="font-weight: 600; color: var(--primary-black);"><%= event.event_type %></div>
                    </div>

                    <div style="margin-bottom: 1.5rem;">
                        <div style="color: var(--secondary-gray); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 0.5rem;">Year</div>
                        <div style="font-weight: 600; color: var(--primary-black); font-size: 1.2rem;"><%= new Date(event.event_date).getFullYear() %></div>
                    </div>

                    <div style="margin-bottom: 1.5rem;">
                        <div style="color: var(--secondary-gray); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 0.5rem;">Location</div>
                        <div style="font-weight: 600; color: var(--primary-black);"><%= event.event_location %></div>
                    </div>

                    <div style="margin-bottom: 1.5rem;">
                        <div style="color: var(--secondary-gray); font-size: 0.9rem; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 0.5rem;">Date</div>
                        <div style="font-weight: 600; color: var(--primary-black);"><%= new Date(event.event_date).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric' 
                        }) %></div>
                    </div>
                </div>
            </div>

            <!-- Share Card -->
            <div class="menu-card">
                <div class="menu-content">
                    <h3 style="font-family: 'Playfair Display', Georgia, serif; font-size: 1.5rem; margin-bottom: 1.5rem; color: var(--primary-black);">Share This Menu</h3>
                    
                    <div style="display: flex; gap: 1rem; margin-bottom: 1rem;">
                        <button class="btn-view-details" style="flex: 1; text-align: center; padding: 0.75rem;">
                            <i class="fab fa-facebook-f me-2"></i>
                            Facebook
                        </button>
                        <button class="btn-view-details" style="flex: 1; text-align: center; padding: 0.75rem;">
                            <i class="fab fa-twitter me-2"></i>
                            Twitter
                        </button>
                    </div>
                    
                    <div style="display: flex; gap: 1rem;">
                        <button class="btn-view-details" style="flex: 1; text-align: center; padding: 0.75rem;">
                            <i class="fab fa-pinterest me-2"></i>
                            Pinterest
                        </button>
                        <button class="btn-view-details" style="flex: 1; text-align: center; padding: 0.75rem;">
                            <i class="fas fa-link me-2"></i>
                            Copy Link
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Photos Section -->
<div class="mb-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="section-title" style="font-size: 2rem; border-bottom: 2px solid var(--accent-orange); margin-bottom: 0;">Photos</h2>
        <div class="d-flex gap-2">
            <button class="btn-view-details" onclick="openPhotoUpload()" id="uploadPhotoBtn">
                <i class="fas fa-upload me-2"></i>
                Upload Photo
            </button>
            <button class="btn-view-details" onclick="openCameraCapture()" id="capturePhotoBtn" style="background-color: var(--secondary-gray);">
                <i class="fas fa-camera me-2"></i>
                Take Photo
            </button>
        </div>
    </div>
    
    <!-- Photos Grid -->
    <div id="photosGrid" class="row">
        <!-- Photos will be loaded here dynamically -->
    </div>
    
    <!-- No photos message -->
    <div id="noPhotosMessage" class="text-center py-5" style="display: none;">
        <i class="fas fa-images" style="font-size: 3rem; color: var(--secondary-gray); margin-bottom: 1rem;"></i>
        <h3 style="color: var(--secondary-gray);">No photos yet</h3>
        <p style="color: var(--secondary-gray);">Upload or take photos to capture memories from this Thanksgiving!</p>
    </div>
</div>

<!-- Photo Upload Modal -->
<div id="photoUploadModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; align-items: center; justify-content: center;">
    <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 600px; width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <h3 style="color: var(--primary-black); margin-bottom: 1rem; font-family: 'Playfair Display', Georgia, serif;">
            <i class="fas fa-upload me-2"></i>
            Upload Photo
        </h3>
        
        <form id="photoUploadForm" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="photoFile" class="form-label">Select Photo</label>
                <input type="file" class="form-control" id="photoFile" accept="image/*" required>
            </div>
            
            <div class="mb-3">
                <label for="photoDescription" class="form-label">Description</label>
                <textarea class="form-control" id="photoDescription" rows="3" placeholder="Describe this photo..."></textarea>
            </div>
            
            <div class="mb-3">
                <label for="photoCaption" class="form-label">Caption</label>
                <input type="text" class="form-control" id="photoCaption" placeholder="Short caption for this photo">
            </div>
            
            <div class="d-flex gap-2 justify-content-end">
                <button type="button" class="btn-view-details" style="background-color: var(--secondary-gray);" onclick="closePhotoUpload()">
                    <i class="fas fa-times me-2"></i>
                    Cancel
                </button>
                <button type="submit" class="btn-view-details">
                    <i class="fas fa-upload me-2"></i>
                    Upload Photo
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Camera Capture Modal -->
<div id="cameraModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; align-items: center; justify-content: center;">
    <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 800px; width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
        <h3 style="color: var(--primary-black); margin-bottom: 1rem; font-family: 'Playfair Display', Georgia, serif;">
            <i class="fas fa-camera me-2"></i>
            Take Photo
        </h3>
        
        <div class="mb-3">
            <video id="cameraVideo" autoplay style="width: 100%; max-height: 400px; border-radius: 8px; background: #000;"></video>
            <canvas id="cameraCanvas" style="display: none;"></canvas>
        </div>
        
        <div class="mb-3">
            <label for="captureDescription" class="form-label">Description</label>
            <textarea class="form-control" id="captureDescription" rows="2" placeholder="Describe this photo..."></textarea>
        </div>
        
        <div class="mb-3">
            <label for="captureCaption" class="form-label">Caption</label>
            <input type="text" class="form-control" id="captureCaption" placeholder="Short caption for this photo">
        </div>
        
        <div class="d-flex gap-2 justify-content-center">
            <button type="button" class="btn-view-details" onclick="startCamera()" id="startCameraBtn">
                <i class="fas fa-video me-2"></i>
                Start Camera
            </button>
            <button type="button" class="btn-view-details" onclick="capturePhoto()" id="captureBtn" style="display: none;">
                <i class="fas fa-camera me-2"></i>
                Capture
            </button>
            <button type="button" class="btn-view-details" onclick="saveCapturedPhoto()" id="saveBtn" style="display: none;">
                <i class="fas fa-save me-2"></i>
                Save Photo
            </button>
            <button type="button" class="btn-view-details" style="background-color: var(--secondary-gray);" onclick="closeCamera()">
                <i class="fas fa-times me-2"></i>
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Navigation Footer -->
<div class="text-center mt-5">
    <a href="/" class="btn-view-details" style="padding: 1rem 2rem; font-size: 1.1rem;">
        <i class="fas fa-home me-2"></i>
        View All Menus
    </a>
</div>

<script>
// Image zoom functionality
function toggleZoom() {
    const overlay = document.getElementById('zoomOverlay');
    const body = document.body;
    
    if (overlay.style.display === 'none' || overlay.style.display === '') {
        overlay.style.display = 'flex';
        body.style.overflow = 'hidden'; // Prevent background scrolling
    } else {
        overlay.style.display = 'none';
        body.style.overflow = 'auto'; // Restore scrolling
    }
}

// Download image functionality
function downloadImage() {
    const img = document.getElementById('menuImage');
    const link = document.createElement('a');
    link.href = img.src;
    link.download = '<%= event.menu_title.replace(/[^a-z0-9]/gi, "_").toLowerCase() %>_menu.jpg';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// Close zoom overlay with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        const overlay = document.getElementById('zoomOverlay');
        if (overlay.style.display === 'flex') {
            toggleZoom();
        }
    }
});

// Responsive image sizing
function adjustImageSize() {
    const container = document.querySelector('.menu-image-container');
    const img = document.getElementById('menuImage');
    
    if (window.innerWidth < 768) {
        container.style.height = '400px';
        container.style.padding = '1rem';
    } else if (window.innerWidth < 1024) {
        container.style.height = '500px';
        container.style.padding = '1.5rem';
    } else {
        container.style.height = '600px';
        container.style.padding = '2rem';
    }
}

// Adjust image size on load and resize
window.addEventListener('load', adjustImageSize);
window.addEventListener('resize', adjustImageSize);

// Edit form functionality
function toggleEditForm() {
    const editForm = document.getElementById('editForm');
    const editBtn = document.getElementById('editToggleBtn');
    
    if (editForm.style.display === 'none' || editForm.style.display === '') {
        editForm.style.display = 'block';
        editBtn.innerHTML = '<i class="fas fa-times me-2"></i>Cancel Edit';
        editBtn.style.backgroundColor = 'var(--secondary-gray)';
    } else {
        editForm.style.display = 'none';
        editBtn.innerHTML = '<i class="fas fa-edit me-2"></i>Edit Menu';
        editBtn.style.backgroundColor = 'var(--accent-orange)';
    }
}

function cancelEdit() {
    const editForm = document.getElementById('editForm');
    const editBtn = document.getElementById('editToggleBtn');
    
    editForm.style.display = 'none';
    editBtn.innerHTML = '<i class="fas fa-edit me-2"></i>Edit Menu';
    editBtn.style.backgroundColor = 'var(--accent-orange)';
    
    // Reset form to original values
    document.getElementById('menuEditForm').reset();
}

// Handle form submission
document.getElementById('menuEditForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(this);
    const updateData = {};
    
    // Convert FormData to object
    for (let [key, value] of formData.entries()) {
        updateData[key] = value;
    }
    
    console.log('Sending update data:', updateData);
    console.log('Update URL:', `/api/v1/events/<%= event.event_id %>`);
    
    try {
        const response = await fetch(`/api/v1/events/<%= event.event_id %>`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            showMessage('Menu updated successfully!', 'success');
            
            // Hide the edit form
            cancelEdit();
            
            // Reload the page after a short delay to show updated content
            setTimeout(() => {
                window.location.reload();
            }, 1500);
        } else {
            console.error('API Error Response:', result);
            showMessage('Error updating menu: ' + (result.error || result.message || 'Unknown error'), 'error');
        }
    } catch (error) {
        console.error('Network/Request Error:', error);
        showMessage('Error updating menu: ' + error.message, 'error');
    }
});

function updatePageContent(updatedData) {
    console.log('Updating page content with:', updatedData);
    
    // Update the main title
    const titleElement = document.querySelector('.menu-title');
    if (titleElement) {
        titleElement.textContent = updatedData.menu_title;
    } else {
        console.warn('Could not find .menu-title element');
    }
    
    // Update the location
    const locationElement = document.querySelector('.menu-location');
    if (locationElement) {
        locationElement.textContent = updatedData.event_location;
    } else {
        console.warn('Could not find .menu-location element');
    }
    
    // Update the date
    const dateElement = document.querySelector('.menu-date');
    if (dateElement) {
        dateElement.textContent = new Date(updatedData.event_date).toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
    } else {
        console.warn('Could not find .menu-date element');
    }
    
    // Update description - look for the paragraph in the About This Menu section
    const descriptionElement = document.querySelector('.mb-5 p');
    if (descriptionElement) {
        descriptionElement.textContent = updatedData.event_description;
    } else {
        console.warn('Could not find description element');
    }
    
    // Update sidebar info - be more specific with selectors
    const eventTypeElement = document.querySelector('.col-lg-4 .menu-card .menu-content div:nth-child(2)');
    if (eventTypeElement) {
        eventTypeElement.textContent = updatedData.event_type;
    }
    
    const yearElement = document.querySelector('.col-lg-4 .menu-card .menu-content div:nth-child(4)');
    if (yearElement) {
        yearElement.textContent = new Date(updatedData.event_date).getFullYear();
    }
    
    const sidebarLocationElement = document.querySelector('.col-lg-4 .menu-card .menu-content div:nth-child(6)');
    if (sidebarLocationElement) {
        sidebarLocationElement.textContent = updatedData.event_location;
    }
    
    const sidebarDateElement = document.querySelector('.col-lg-4 .menu-card .menu-content div:nth-child(8)');
    if (sidebarDateElement) {
        sidebarDateElement.textContent = new Date(updatedData.event_date).toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
        });
    }
    
    console.log('Page content update completed');
}

function showMessage(message, type) {
    // Create message element
    const messageDiv = document.createElement('div');
    messageDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
    messageDiv.style.position = 'fixed';
    messageDiv.style.top = '20px';
    messageDiv.style.right = '20px';
    messageDiv.style.zIndex = '10000';
    messageDiv.style.minWidth = '300px';
    messageDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    document.body.appendChild(messageDiv);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (messageDiv.parentNode) {
            messageDiv.parentNode.removeChild(messageDiv);
        }
    }, 5000);
}

// Delete functionality
function showDeleteConfirmation() {
    const modal = document.getElementById('deleteModal');
    if (modal) {
        modal.style.display = 'block';
    } else {
        createDeleteModal();
    }
}

function createDeleteModal() {
    // Create modal HTML
    const modalHTML = `
        <div id="deleteModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 10000; display: flex; align-items: center; justify-content: center;">
            <div style="background: white; padding: 2rem; border-radius: 8px; max-width: 500px; width: 90%; box-shadow: 0 4px 20px rgba(0,0,0,0.3);">
                <h3 style="color: #dc3545; margin-bottom: 1rem; font-family: 'Playfair Display', Georgia, serif;">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Delete Menu
                </h3>
                <p style="margin-bottom: 1.5rem; color: var(--secondary-gray);">
                    Are you sure you want to delete "<strong><%= event.menu_title %></strong>"? 
                    This action cannot be undone and will permanently remove this menu from the database.
                </p>
                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                    <button onclick="hideDeleteConfirmation()" class="btn-view-details" style="background-color: var(--secondary-gray);">
                        <i class="fas fa-times me-2"></i>
                        Cancel
                    </button>
                    <button onclick="confirmDelete()" class="btn-view-details" style="background-color: #dc3545; border-color: #dc3545;">
                        <i class="fas fa-trash me-2"></i>
                        Delete Menu
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    document.getElementById('deleteModal').style.display = 'block';
}

function hideDeleteConfirmation() {
    const modal = document.getElementById('deleteModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

async function confirmDelete() {
    try {
        const response = await fetch(`/api/v1/events/<%= event.event_id %>`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        const result = await response.json();
        
        if (result.success) {
            // Show success message
            showMessage('Menu deleted successfully!', 'success');
            
            // Hide the modal
            hideDeleteConfirmation();
            
            // Redirect to home page after a short delay
            setTimeout(() => {
                window.location.href = '/';
            }, 1500);
        } else {
            showMessage('Error deleting menu: ' + (result.error || 'Unknown error'), 'error');
            hideDeleteConfirmation();
        }
    } catch (error) {
        console.error('Error:', error);
        showMessage('Error deleting menu. Please try again.', 'error');
        hideDeleteConfirmation();
    }
}

// Close modal when clicking outside
document.addEventListener('click', function(event) {
    const modal = document.getElementById('deleteModal');
    if (modal && event.target === modal) {
        hideDeleteConfirmation();
    }
});

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        hideDeleteConfirmation();
    }
});

// Photo Management Functions
let currentStream = null;
let capturedImageData = null;

// Load photos when page loads
document.addEventListener('DOMContentLoaded', function() {
    loadPhotos();
});

async function loadPhotos() {
    try {
        const response = await fetch(`/api/v1/events/<%= event.event_id %>/photos`);
        const result = await response.json();
        
        if (result.success) {
            displayPhotos(result.data);
        } else {
            console.error('Error loading photos:', result.error);
        }
    } catch (error) {
        console.error('Error loading photos:', error);
    }
}

function displayPhotos(photos) {
    const photosGrid = document.getElementById('photosGrid');
    const noPhotosMessage = document.getElementById('noPhotosMessage');
    
    console.log('Displaying photos:', photos.map(p => ({
        photo_id: p.photo_id,
        filename: p.filename,
        hasFileData: !!p.file_data,
        fileDataLength: p.file_data ? p.file_data.length : 0
    })));
    
    if (photos.length === 0) {
        photosGrid.innerHTML = '';
        noPhotosMessage.style.display = 'block';
        return;
    }
    
    noPhotosMessage.style.display = 'none';
    photosGrid.innerHTML = photos.map(photo => `
        <div class="col-md-4 col-lg-3 mb-4">
            <div class="card" style="height: 100%;">
                <div style="height: 200px; overflow: hidden; position: relative;">
                    <img src="${photo.file_data || '/images/placeholder-menu.jpg'}" 
                         alt="${photo.caption || 'Photo'}" 
                         class="card-img-top photo-view-trigger" 
                         style="width: 100%; height: 100%; object-fit: cover; cursor: pointer;"
                         data-file-data="${photo.file_data || ''}"
                         data-description="${photo.description || ''}"
                         data-caption="${photo.caption || ''}">
                    <div style="position: absolute; top: 10px; right: 10px;">
                        <button class="btn btn-sm btn-light photo-edit-trigger" 
                                data-photo-id="${photo.photo_id}" 
                                data-description="${photo.description || ''}" 
                                data-caption="${photo.caption || ''}" 
                                title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger photo-delete-trigger" 
                                data-photo-id="${photo.photo_id}" 
                                title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <h6 class="card-title">${photo.caption || 'Untitled'}</h6>
                    <p class="card-text small text-muted">${photo.description || 'No description'}</p>
                    <small class="text-muted">${new Date(photo.taken_date).toLocaleDateString()}</small>
                </div>
            </div>
        </div>
    `).join('');
    
    // Add event listeners after HTML is inserted
    addPhotoEventListeners();
}

// Photo Upload Functions
function openPhotoUpload() {
    document.getElementById('photoUploadModal').style.display = 'flex';
}

function closePhotoUpload() {
    document.getElementById('photoUploadModal').style.display = 'none';
    document.getElementById('photoUploadForm').reset();
}

// Handle photo upload form submission
document.getElementById('photoUploadForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const fileInput = document.getElementById('photoFile');
    const description = document.getElementById('photoDescription').value;
    const caption = document.getElementById('photoCaption').value;
    
    if (!fileInput.files[0]) {
        showMessage('Please select a photo to upload', 'error');
        return;
    }
    
    const file = fileInput.files[0];
    
    // Validate file size (10MB limit)
    if (file.size > 10 * 1024 * 1024) {
        showMessage('File size must be less than 10MB', 'error');
        return;
    }
    
    // Validate file type
    if (!file.type.startsWith('image/')) {
        showMessage('Please select an image file', 'error');
        return;
    }
    
    const formData = new FormData();
    formData.append('photo', file);
    formData.append('description', description);
    formData.append('caption', caption);
    
    try {
        const response = await fetch(`/api/v1/events/<%= event.event_id %>/photos`, {
            method: 'POST',
            body: formData // Don't set Content-Type header, let browser set it with boundary
        });
        
        const result = await response.json();
        
        if (result.success) {
            showMessage('Photo uploaded successfully!', 'success');
            closePhotoUpload();
            loadPhotos(); // Reload photos
        } else {
            console.error('Photo upload error:', result);
            showMessage('Error uploading photo: ' + (result.error || result.message || 'Unknown error'), 'error');
        }
    } catch (error) {
        console.error('Error uploading photo:', error);
        showMessage('Error uploading photo. Please try again.', 'error');
    }
});

// Camera Functions
function openCameraCapture() {
    document.getElementById('cameraModal').style.display = 'flex';
}

function closeCamera() {
    document.getElementById('cameraModal').style.display = 'none';
    stopCamera();
    document.getElementById('captureDescription').value = '';
    document.getElementById('captureCaption').value = '';
    document.getElementById('startCameraBtn').style.display = 'inline-block';
    document.getElementById('captureBtn').style.display = 'none';
    document.getElementById('saveBtn').style.display = 'none';
}

async function startCamera() {
    try {
        currentStream = await navigator.mediaDevices.getUserMedia({ 
            video: { 
                width: { ideal: 1280 },
                height: { ideal: 720 }
            } 
        });
        
        const video = document.getElementById('cameraVideo');
        video.srcObject = currentStream;
        
        document.getElementById('startCameraBtn').style.display = 'none';
        document.getElementById('captureBtn').style.display = 'inline-block';
    } catch (error) {
        console.error('Error accessing camera:', error);
        showMessage('Error accessing camera. Please check permissions.', 'error');
    }
}

function stopCamera() {
    if (currentStream) {
        currentStream.getTracks().forEach(track => track.stop());
        currentStream = null;
    }
}

function capturePhoto() {
    const video = document.getElementById('cameraVideo');
    const canvas = document.getElementById('cameraCanvas');
    const ctx = canvas.getContext('2d');
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    ctx.drawImage(video, 0, 0);
    
    capturedImageData = canvas.toDataURL('image/jpeg', 0.8);
    
    document.getElementById('captureBtn').style.display = 'none';
    document.getElementById('saveBtn').style.display = 'inline-block';
    
    stopCamera();
}

async function saveCapturedPhoto() {
    const description = document.getElementById('captureDescription').value;
    const caption = document.getElementById('captureCaption').value;
    
    try {
        // Convert data URL to blob
        const response = await fetch(capturedImageData);
        const blob = await response.blob();
        
        // Create mock photo data
        const mockPhoto = {
            filename: `capture_${Date.now()}.jpg`,
            original_filename: `camera_capture_${Date.now()}.jpg`,
            description: description,
            caption: caption,
            mime_type: 'image/jpeg',
            file_size: blob.size,
            taken_date: new Date().toISOString()
        };
        
        const apiResponse = await fetch(`/api/v1/events/<%= event.event_id %>/photos`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(mockPhoto)
        });
        
        const result = await apiResponse.json();
        
        if (result.success) {
            showMessage('Photo captured and saved!', 'success');
            closeCamera();
            loadPhotos(); // Reload photos
        } else {
            showMessage('Error saving photo: ' + (result.error || 'Unknown error'), 'error');
        }
    } catch (error) {
        console.error('Error saving captured photo:', error);
        showMessage('Error saving photo. Please try again.', 'error');
    }
}

// Add event listeners for photo interactions
function addPhotoEventListeners() {
    // Photo view triggers
    document.querySelectorAll('.photo-view-trigger').forEach(img => {
        img.addEventListener('click', function() {
            const fileData = this.getAttribute('data-file-data');
            const description = this.getAttribute('data-description');
            const caption = this.getAttribute('data-caption');
            viewPhoto(fileData, description, caption);
        });
    });
    
    // Photo edit triggers
    document.querySelectorAll('.photo-edit-trigger').forEach(btn => {
        btn.addEventListener('click', function() {
            const photoId = this.getAttribute('data-photo-id');
            const description = this.getAttribute('data-description');
            const caption = this.getAttribute('data-caption');
            editPhoto(photoId, description, caption);
        });
    });
    
    // Photo delete triggers
    document.querySelectorAll('.photo-delete-trigger').forEach(btn => {
        btn.addEventListener('click', function() {
            const photoId = this.getAttribute('data-photo-id');
            deletePhoto(photoId);
        });
    });
}

// Photo Management Functions
function viewPhoto(fileData, description, caption) {
    // Check if fileData is valid
    if (!fileData || fileData === '' || fileData === 'undefined') {
        showMessage('Photo data not available for viewing', 'error');
        return;
    }
    
    // Create a simple photo viewer modal
    const modal = document.createElement('div');
    modal.style.cssText = `
        position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
        background-color: rgba(0,0,0,0.9); z-index: 10001; 
        display: flex; align-items: center; justify-content: center;
        cursor: pointer;
    `;
    modal.onclick = () => document.body.removeChild(modal);
    
    modal.innerHTML = `
        <div style="max-width: 90%; max-height: 90%; text-align: center;">
            <img src="${fileData}" 
                 style="max-width: 100%; max-height: 80%; object-fit: contain; border-radius: 8px;"
                 onerror="this.src='/images/placeholder-menu.jpg'">
            <div style="color: white; margin-top: 1rem;">
                <h4>${caption || 'Untitled'}</h4>
                <p>${description || 'No description'}</p>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

function editPhoto(photoId, currentDescription, currentCaption) {
    const newDescription = prompt('Edit description:', currentDescription);
    const newCaption = prompt('Edit caption:', currentCaption);
    
    if (newDescription !== null || newCaption !== null) {
        updatePhoto(photoId, newDescription, newCaption);
    }
}

async function updatePhoto(photoId, description, caption) {
    try {
        const response = await fetch(`/api/v1/photos/${photoId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ description, caption })
        });
        
        const result = await response.json();
        
        if (result.success) {
            showMessage('Photo updated successfully!', 'success');
            loadPhotos(); // Reload photos
        } else {
            showMessage('Error updating photo: ' + (result.error || 'Unknown error'), 'error');
        }
    } catch (error) {
        console.error('Error updating photo:', error);
        showMessage('Error updating photo. Please try again.', 'error');
    }
}

async function deletePhoto(photoId) {
    if (!confirm('Are you sure you want to delete this photo? This action cannot be undone.')) {
        return;
    }
    
    try {
        const response = await fetch(`/api/v1/photos/${photoId}`, {
            method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
            showMessage('Photo deleted successfully!', 'success');
            loadPhotos(); // Reload photos
        } else {
            showMessage('Error deleting photo: ' + (result.error || 'Unknown error'), 'error');
        }
    } catch (error) {
        console.error('Error deleting photo:', error);
        showMessage('Error deleting photo. Please try again.', 'error');
    }
}

// Close modals when clicking outside
document.addEventListener('click', function(event) {
    const photoUploadModal = document.getElementById('photoUploadModal');
    const cameraModal = document.getElementById('cameraModal');
    
    if (photoUploadModal && event.target === photoUploadModal) {
        closePhotoUpload();
    }
    if (cameraModal && event.target === cameraModal) {
        closeCamera();
    }
});
</script>