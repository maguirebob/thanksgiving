#!/usr/bin/env ts-node

import { S3Client, PutObjectCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';

/**
 * Script to create necessary S3 bucket directory structure in production
 * This ensures production has the same S3 structure as test
 */

class S3BucketSetup {
  private s3Client: S3Client;
  private bucketName: string;
  private region: string;

  constructor() {
    this.region = process.env['AWS_REGION'] || 'us-east-1';
    this.bucketName = process.env['S3_BUCKET_NAME'] || 'thanksgiving-images-prod';
    
    // Check if S3 credentials are available
    const accessKeyId = process.env['AWS_ACCESS_KEY_ID'];
    const secretAccessKey = process.env['AWS_SECRET_ACCESS_KEY'];
    
    if (!accessKeyId || !secretAccessKey) {
      console.error('‚ùå S3 credentials not configured. Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY');
      process.exit(1);
    }

    this.s3Client = new S3Client({
      region: this.region,
      credentials: {
        accessKeyId,
        secretAccessKey
      }
    });

    console.log(`üîß S3 Setup for bucket: ${this.bucketName} in region: ${this.region}`);
  }

  /**
   * Create directory structure in S3 bucket
   * S3 doesn't have real directories, but we create placeholder files
   */
  async createDirectoryStructure(): Promise<void> {
    console.log('üìÅ Creating S3 directory structure...');
    
    const directories = [
      'photos/',
      'menus/',
      'recipes/',
      'uploads/'
    ];

    for (const dir of directories) {
      try {
        // Create a placeholder file to establish the "directory"
        const placeholderKey = `${dir}.gitkeep`;
        const placeholderContent = `# This file ensures the ${dir} directory exists in S3\n# Generated by setup script\n`;
        
        const command = new PutObjectCommand({
          Bucket: this.bucketName,
          Key: placeholderKey,
          Body: placeholderContent,
          ContentType: 'text/plain'
        });

        await this.s3Client.send(command);
        console.log(`‚úÖ Created: ${dir}`);
      } catch (error) {
        console.error(`‚ùå Failed to create ${dir}:`, error);
        throw error;
      }
    }

    console.log('üéâ S3 directory structure created successfully!');
  }

  /**
   * List current bucket contents
   */
  async listBucketContents(): Promise<void> {
    console.log('üìÇ Current S3 bucket contents:');
    
    try {
      const command = new ListObjectsV2Command({
        Bucket: this.bucketName,
        MaxKeys: 50
      });

      const response = await this.s3Client.send(command);
      
      if (response.Contents && response.Contents.length > 0) {
        console.log('Files in bucket:');
        response.Contents.forEach(obj => {
          console.log(`  - ${obj.Key} (${obj.Size} bytes)`);
        });
      } else {
        console.log('  (bucket is empty)');
      }
    } catch (error) {
      console.error('‚ùå Failed to list bucket contents:', error);
    }
  }

  /**
   * Verify directory structure exists
   */
  async verifyDirectoryStructure(): Promise<void> {
    console.log('üîç Verifying directory structure...');
    
    const expectedDirs = ['photos/', 'menus/', 'recipes/', 'uploads/'];
    
    try {
      const command = new ListObjectsV2Command({
        Bucket: this.bucketName,
        Prefix: '',
        MaxKeys: 100
      });

      const response = await this.s3Client.send(command);
      const existingKeys = response.Contents?.map(obj => obj.Key) || [];
      
      for (const dir of expectedDirs) {
        const hasDir = existingKeys.some(key => key.startsWith(dir));
        if (hasDir) {
          console.log(`‚úÖ Verified: ${dir}`);
        } else {
          console.log(`‚ùå Missing: ${dir}`);
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to verify directory structure:', error);
      throw error;
    }
  }

  /**
   * Run the complete setup process
   */
  async run(): Promise<void> {
    try {
      console.log('üöÄ Setting up S3 bucket structure for production...');
      
      await this.listBucketContents();
      await this.createDirectoryStructure();
      await this.verifyDirectoryStructure();
      
      console.log('\nüéâ S3 bucket setup complete!');
      console.log('\nNext steps:');
      console.log('1. Test photo upload functionality');
      console.log('2. Verify photos page loads correctly');
      console.log('3. Check admin dashboard photo management');
      console.log(`4. Visit: https://${this.bucketName}.s3.${this.region}.amazonaws.com/`);
      
    } catch (error) {
      console.error('‚ùå Setup failed:', error);
      process.exit(1);
    }
  }
}

// Run the setup if this script is executed directly
if (require.main === module) {
  const setup = new S3BucketSetup();
  setup.run().catch(console.error);
}

export default S3BucketSetup;
