// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  user_id      Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  password_hash String  @db.VarChar(255)
  role         UserRole @default(user)
  first_name   String?  @db.VarChar(255)
  last_name    String?  @db.VarChar(255)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  sessions   Session[]
  recipes    Recipe[]
  blog_posts BlogPost[]

  @@map("Users")
}

model Session {
  session_id String   @id @db.VarChar(128)
  user_id    Int?
  expires    DateTime
  data       String?  @db.Text
  created_at DateTime @default(now())

  // Relations
  user User? @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("Sessions")
}

model Event {
  event_id            Int      @id @default(autoincrement())
  event_name          String   @db.VarChar(255)
  event_type          String   @db.VarChar(255)
  event_location      String?  @db.VarChar(255)
  event_date          DateTime @db.Date
  event_description   String?  @db.Text
  menu_title          String   @db.VarChar(255)
  menu_image_filename String   @db.VarChar(255)
  menu_image_s3_url   String?  @db.VarChar(500)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  // Relations
  photos     Photo[]
  recipes    Recipe[]
  blog_posts BlogPost[]

  @@map("events")
}

model Photo {
  photo_id         Int      @id @default(autoincrement())
  event_id         Int
  filename         String   @db.VarChar(255)
  original_filename String? @db.VarChar(255)
  description      String?  @db.Text
  caption          String?  @db.Text
  taken_date       DateTime @default(now())
  file_size        Int?
  mime_type        String?  @db.VarChar(100)
  file_data        String?  @db.Text
  s3_url           String?  @db.VarChar(500)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  event Event @relation(fields: [event_id], references: [event_id], onDelete: Cascade)

  @@map("Photos")
}

model Recipe {
  recipe_id        Int      @id @default(autoincrement())
  event_id         Int
  user_id          Int?
  title            String   @db.VarChar(255)
  description      String?  @db.Text
  ingredients      String   @db.Text
  instructions     String   @db.Text
  prep_time        Int?     // minutes
  cook_time        Int?     // minutes
  servings         Int?
  difficulty_level String?  @db.VarChar(20) // Easy, Medium, Hard
  category         String?  @db.VarChar(50) // Main Course, Side Dish, Dessert, Appetizer, Beverage
  image_filename   String?  @db.VarChar(255)
  image_s3_url     String?  @db.VarChar(500)
  is_featured      Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  // Relations
  event Event @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user  User? @relation(fields: [user_id], references: [user_id], onDelete: SetNull)

  @@map("Recipes")
}

model BlogPost {
  blog_post_id    Int      @id @default(autoincrement())
  event_id       Int
  user_id        Int
  title          String   @db.VarChar(255)
  content        String   @db.Text
  excerpt        String?  @db.Text
  featured_image String?  @db.VarChar(255)
  tags           String[] // Array of tags
  status         String   @default("draft") @db.VarChar(20) // draft, published, archived
  published_at   DateTime?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  event Event @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("BlogPosts")
}