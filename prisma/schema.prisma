generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       Int        @id @default(autoincrement())
  username      String     @unique @db.VarChar(255)
  email         String     @unique @db.VarChar(255)
  password_hash String     @db.VarChar(255)
  first_name    String?    @db.VarChar(255)
  last_name     String?    @db.VarChar(255)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  role          UserRole   @default(user)
  blog_posts    BlogPost[]
  recipes       Recipe[]
  sessions      Session[]

  @@map("Users")
}

model Session {
  session_id String   @id @db.VarChar(128)
  user_id    Int?
  expires    DateTime
  data       String?
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("Sessions")
}

model Event {
  event_id            Int        @id @default(autoincrement())
  event_name          String     @db.VarChar(255)
  event_type          String     @db.VarChar(255)
  event_location      String?    @db.VarChar(255)
  event_date          DateTime   @db.Date
  event_description   String?
  menu_title          String     @db.VarChar(255)
  menu_image_filename String     @db.VarChar(255)
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  menu_image_s3_url   String?    @db.VarChar(500)
  blog_posts          BlogPost[]
  photos              Photo[]
  recipes             Recipe[]
  journal_sections     JournalSection[]

  @@map("events")
}

model Photo {
  photo_id          Int       @id @default(autoincrement())
  event_id          Int
  filename          String    @db.VarChar(255)
  original_filename String?   @db.VarChar(255)
  description       String?
  caption           String?
  taken_date        DateTime  @default(now())
  file_size         Int?
  mime_type         String?   @db.VarChar(100)
  file_data         String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  s3_url            String?   @db.VarChar(500)
  photo_type        PhotoType @default(individual)
  event             Event     @relation(fields: [event_id], references: [event_id], onDelete: Cascade)

  @@map("Photos")
}

model Recipe {
  recipe_id        Int      @id @default(autoincrement())
  event_id         Int
  user_id          Int?
  title            String   @db.VarChar(255)
  description      String?
  ingredients      String
  instructions     String
  prep_time        Int?
  cook_time        Int?
  servings         Int?
  difficulty_level String?  @db.VarChar(20)
  category         String?  @db.VarChar(50)
  image_filename   String?  @db.VarChar(255)
  is_featured      Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  image_s3_url     String?  @db.VarChar(500)
  event            Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user             User?    @relation(fields: [user_id], references: [user_id])

  @@map("Recipes")
}

model BlogPost {
  blog_post_id   Int       @id @default(autoincrement())
  event_id       Int
  user_id        Int
  title          String    @db.VarChar(255)
  content        String
  excerpt        String?
  featured_image String?   @db.VarChar(255)
  tags           String[]
  status         String    @default("draft") @db.VarChar(20)
  published_at   DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  images         String[]
  event          Event     @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user           User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("BlogPosts")
}

model JournalSection {
  section_id     Int      @id @default(autoincrement())
  event_id       Int
  year           Int
  section_order  Int      @default(1)
  title          String?  @db.VarChar(255)
  description    String?
  layout_config  Json?
  is_published   Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  event          Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  content_items  JournalContentItem[]

  @@unique([event_id, year, section_order])
  @@map("JournalSections")
}

model JournalContentItem {
  content_item_id      Int           @id @default(autoincrement())
  journal_section_id   Int
  content_type         ContentType
  content_id           Int?
  custom_text          String?
  heading_level        Int?          @default(1)
  display_order        Int
  is_visible           Boolean       @default(true)
  manual_page_break    Boolean       @default(false)
  page_break_position  Int?          @default(1)
  created_at           DateTime      @default(now())
  updated_at           DateTime      @updatedAt
  journal_section      JournalSection @relation(fields: [journal_section_id], references: [section_id], onDelete: Cascade)

  @@map("JournalContentItems")
}

enum UserRole {
  user
  admin
}

enum PhotoType {
  individual
  page
}

enum ContentType {
  menu
  photo
  page_photo
  blog
  text
  heading
}
